openapi: 3.0.0
info:
  title: CollegeXchange API
  description: P2P Buy-Sell Platform for College Communities
  version: 1.0.0
servers:
- url: /
paths:
  /login:
    post:
      tags:
      - User management
      summary: Log in and obtain JWT token
      operationId: loginPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              example:
                token: <JWT_TOKEN>
                name: John Doe
      x-swagger-router-controller: UserManagement
  /register:
    post:
      tags:
      - User management
      summary: Create a new user account
      operationId: registerPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
        required: true
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              example:
                token: <JWT_TOKEN>
                message: Account created successfully
        "400":
          description: "Bad Request (e.g., invalid input)"
          content:
            application/json:
              example:
                error: Invalid input
      x-swagger-router-controller: UserManagement
  /users/{userId}:
    put:
      tags:
      - User management
      summary: Update user details
      operationId: usersUserIdPUT
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        "200":
          description: User details updated successfully
          content:
            application/json:
              example:
                message: User details updated successfully
        "400":
          description: "Bad Request (e.g., invalid input)"
          content:
            application/json:
              example:
                error: Invalid input
        "404":
          description: User not found
          content:
            application/json:
              example:
                error: User not found
      security:
      - JWT: []
      x-swagger-router-controller: UserManagement
    delete:
      tags:
      - User management
      summary: Delete user account
      operationId: usersUserIdDELETE
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: User account deleted successfully
          content:
            application/json:
              example:
                message: User account deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              example:
                error: User not found
      security:
      - JWT: []
      x-swagger-router-controller: UserManagement
  /listings:
    get:
      tags:
      - Listing management
      summary: Get listings with filters and paging
      operationId: listingsGET
      parameters:
      - name: category
        in: query
        description: Filter by category
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: seller
        in: query
        description: Filter by seller (user ID)
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: price
        in: query
        description: Filter by price
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: sortByDate
        in: query
        description: Sort by date (true/false)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: sortByMinimumBid
        in: query
        description: Sort by minimum bid (true/false)
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: limit
        in: query
        description: Limit number of results
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                listings:
                - id: 1
                  title: Example Listing
                  location: Campus XYZ
                  suggestedMinimumBid: 50
                  owner:
                    id: 123
                    name: John Doe
      security:
      - JWT: []
      x-swagger-router-controller: ListingManagement
    post:
      tags:
      - Listing management
      summary: Create a new listing
      operationId: listingsPOST
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingCreate'
        required: true
      responses:
        "201":
          description: Listing created successfully
          content:
            application/json:
              example:
                message: Listing created successfully
                listingId: 2
      security:
      - JWT: []
      x-swagger-router-controller: ListingManagement
  /listings/{listingId}:
    get:
      tags:
      - Listing management
      summary: Get details for a specific listing
      operationId: listingsListingIdGET
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                listing:
                  id: 1
                  title: Example Listing
                  location: Campus XYZ
                  suggestedMinimumBid: 50
                  owner:
                    id: 123
                    name: John Doe
                offerMadeByUser:
                  id: 1
                  amount: 60
                  validityDuration: 7
                  createdAt: 2024-01-15T12:00:00Z
                  offerer:
                    id: 456
                    name: Jane Doe
      x-swagger-router-controller: ListingManagement
    put:
      tags:
      - Listing management
      summary: Edit an existing listing
      operationId: listingsListingIdPUT
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingCreate'
        required: true
      responses:
        "200":
          description: Listing edited successfully
          content:
            application/json:
              example:
                message: Listing edited successfully
      security:
      - JWT: []
      x-swagger-router-controller: ListingManagement
  /offers/{listingId}:
    get:
      tags:
      - Listing management
      summary: Get offers on a specified listing (only accessible by the listing owner)
      operationId: offersListingIdGET
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                offers:
                - id: 1
                  amount: 60
                  validityDuration: 7
                  createdAt: 2024-01-15T12:00:00Z
                  offerer:
                    id: 456
                    name: Jane Doe
      security:
      - JWT: []
      x-swagger-router-controller: ListingManagement
  /offers/{offerId}/accept:
    post:
      tags:
      - Offer management
      summary: Accept an offer
      operationId: offersOfferIdAcceptPOST
      parameters:
      - name: offerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptOffer'
        required: true
      responses:
        "200":
          description: Offer accepted successfully
          content:
            application/json:
              example:
                message: Offer accepted successfully
        "400":
          description: "Bad Request (e.g., invalid input)"
          content:
            application/json:
              example:
                error: Invalid input
        "403":
          description: "Forbidden (e.g., user not authorized to accept this offer)"
          content:
            application/json:
              example:
                error: Forbidden
        "404":
          description: Offer not found
          content:
            application/json:
              example:
                error: Offer not found
      security:
      - JWT: []
      x-swagger-router-controller: OfferManagement
  /users/offers:
    get:
      tags:
      - Offer management
      summary: Get all offers made by the user
      operationId: usersOffersGET
      parameters:
      - name: limit
        in: query
        description: Limit number of results
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                offers:
                - id: 1
                  amount: 60
                  validityDuration: 7
                  createdAt: 2024-01-15T12:00:00Z
                  listing:
                    id: 2
                    title: Another Listing
      security:
      - JWT: []
      x-swagger-router-controller: OfferManagement
  /offers/{offerId}:
    delete:
      tags:
      - Offer management
      summary: Delete an offer (only accessible by the offer creator)
      operationId: offersOfferIdDELETE
      parameters:
      - name: offerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Offer deleted successfully
          content:
            application/json:
              example:
                message: Offer deleted successfully
      security:
      - JWT: []
      x-swagger-router-controller: OfferManagement
components:
  schemas:
    UpdateUser:
      required:
      - email
      type: object
      properties:
        fullName:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
    LoginCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RegisterUser:
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    AcceptOffer:
      type: object
      properties:
        offerId:
          type: integer
    ListingCreate:
      type: object
      properties:
        title:
          type: string
        images:
          type: array
          description: Array of image paths
          items:
            type: string
        location:
          type: string
        hostel:
          type: string
        suggestedMinimumBid:
          type: number
        description:
          type: string
        amazonLink:
          type: string
        categoryId:
          type: integer
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
